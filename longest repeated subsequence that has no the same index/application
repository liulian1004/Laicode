//Question:
give a input string, find the longest repeated subsequences such that
two subsequences don't share the same character at the same index

private int longestSubsequence(String s) {
        //dp[i][j] represent the longest common subsequence that end at index i -1 and index j -1
        if(s == null || s.length() == 0) {
            return 0;
        }
        int l = s.length();
        int[][] dp = new int[l+1][l+1];
        //base case dp[0][j]. dp[i][0] == > 其中一个为空集，return 0
        for(int i = 1; i <= l; i++) {
            for(int j = 1; j <= l; j++) {
                if(s.charAt(i-1) == s.charAt(j-1) && (i-1) != (j-1)) {
                    dp[i][j] = dp[i-1][j-1] + 1;
                }else {
                    dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]);
                }

            }
        }
        return dp[l][l];
    }
