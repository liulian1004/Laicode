permutation
//T：O(n!) S: O(n)
private boolean isLoop(String[] input) {
        if(input == null || input.length <= 1) {
            return false;
        }
        return helper(input, 1);
  }
  private boolean helper(String[] input, int index) {
      if (index == input.length -1 ) {
          return match(input[index-1], input[0]);
          }
          for (int i = index; i < input.length; i++) {
              //尾头确认相等？
              if (match(input[index-1], input[i])) {
                  //确认好的数组swap到左边，后续就不用参与确认了
                  swap(input, i, index);
                  //如果return的结果是true,向上返回true
                  if(helper(input, index + 1)) {
                      return true;
                  }
                  swap(input, index, i);
              }
          }
          return false;
  }
  private boolean match(String a, String b) {
        return a.charAt(a.length()-1) == b.charAt(0);
  }
  private void swap(String[] input, int i ,int j) {
        String temp = input[i];
        input[i] = input[j];
        input[j] = input[i];
  }
