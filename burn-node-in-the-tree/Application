Give a binary tree, and a random node in  it which is on fire, it will burn a level of node in one hr
return the total number to burn all the node in the tree

//solution
//update the global max for the node that one branch has no fire and another branch has fire
// the global max = height with no fire  branch + the height from burned node

private int solution(TreeNode root, TreeNode a){
        int[] max = new int[]{0};
        getTime(root, a, max);
        getTime2(root, a, max);
        return max[0];
    }
    private int getTime(TreeNode root, TreeNode a, int[] max){
        if(root == null){
            return 0;
        }
        //meet the burned node
        if(root == a){
            return -1;
        }
        int left = getTime(root.left, a, max);
        int right = getTime(root.right, a, max);
        // no fire from two branches, just return the height;
        if(left >=0 && right >= 0){
            return Math.max(left, right) +1;
        }
        //has fire, two height add together for updating the max
        if(left < 0){
            max[0] = Math.max(max[0], 1-left+right);
            return left - 1;
        }
        //has fire from right
        max[0] = Math.max(max[0],1-right+left);
        return right-1;
    }
    private int getTime2(TreeNode root, TreeNode a, int[] max){
        if(root == null){
            return 0;
        }
        int left = getTime2(root.left, a, max);
        int right = getTime2(root.right, a, max);
        int res = Math.max(left, right)+1;
        if(root == a){
            max[0] = Math.max(max[0], res);
        }
        return res;
    }
