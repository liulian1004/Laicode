Some of the digits can be rotated by 180 degrees to form new digits.
e.g. When 0, 1, 6, 8, 9 are rotated 180 degrees,
they become 0, 1, 9, 8, 6 respectively.
When 2, 3, 4, 5 and 7 are rotated 180 degrees, they become invalid.


A confusing number is a number that when rotated 180 degrees becomes
a different number with each digit valid.
(Note that the rotated number can be greater than the original number.)   10 â†’ 01

Given a positive integer N, return all the confusing numbers between 1 and N inclusive.

private List<Integer> findConfusingNumber(int n) {
        //T: O(n) S: O(1)
        List<Integer> list = new ArrayList<>();
        Set<Integer> inValid = buildInvalid();
        Set<Integer> valid = buildValid();
        for(int i = 1; i <= n; i++) {
            if(confusingNum(map, i)) {
                list.add(i);
            }
        }
        return list;
    }
    private static Set<Integer>  buildInvalid() {
        Set<Integer> set = new HashSet<>();
        set.add(2);
        set.add(3);
        set.add(4);
        set.add(5);
        return set;
    }
    private static Set<Integer>  buildInvalid() {
        Set<Integer> set = new HashSet<>();
        set.add(6);
        set.add(9);
        return set;
    }

    private boolean confusingNum(Map<Integer, Integer> map, int i) {
        boolean valid = false;
        while( i >= 1) {
            int digit = i %10;
            // single digit is not in the map, don't check whether it's valid confusing number
            if(inValid.contains(digit)) {
                return false;
            }
            if(valid.contains(digit)) {
            valid = true;
            }
        }
        return valid == true;
    }
