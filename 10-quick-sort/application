public class Solution {
  public int[] quickSort(int[] array) {
    // T: O(nlogn) -worst O(n^2); S: O(logn) - worst O(n)
    if (array == null || array.length <= 1) {
      return array;
    }
    quickSort(array, 0, array.length - 1);
    return array;
  }
  private void quickSort(int[] array, int left, int right) {
  //if input size = 2
  //recusrion 会变成【‘’】 和 【一个元素】
  //left > right是代表[" "]的情况
    if(left >= right) {
      return;
    }
    // 因为random的范围是[left, right), 为了确保有可能取到最后一位right，范围需要变成[left, right+1]
    int pivot = left + (int)(Math.random() * (right - left + 1));
    int i = left;
    int j = right -1 ;
    swap(array, pivot , right);
    // must check the last element
    //because [i,j] is the scope of comparing with right
    //优化swap次数
    //先判断不需要swap的情况
    //剩余情况都要swap，两边都需要移动
    while (i <= j) {
      if(array[i]<= array[right]) {
        i++;
        continue;
      }
        if(array[j] > array[right]){
        j--;
        continue;
      }
        swap(array, i, j--);
    }
    swap(array, i, right);
    //这里pivot已经消失，所以要用i代替
    quickSort(array, left, i-1);
    quickSort(array, i + 1, right);
  }

  private void swap(int[] array, int i, int j) {
    int temp = array[i];
    array[i] = array[j];
    array[j] = temp;
  }
}
//follow up
//quick sort for string[]:"Bob", "Alice", "Boba","David","Eva"

private void sort(String[] input){
        quickSort(input, 0, input.length-1);
    }
    private void quickSort(String[] input, int left, int right){
        if(left >= right){
            return;
        }
        int partition = left + (int)(Math.random()*(right-left+1));
        swap(input,right, partition);
        int i = left;
        int j = right-1;
        while(i <= j){
            if(smaller(input[i],input[right])){
                i++;
            }else{
                swap(input, i, j);
                j--;
            }
        }
        swap(input, i, right);
        quickSort(input,left, i-1);
        quickSort(input,i+1, right);
    }
    private void swap(String[] input, int i, int j){
        String temp = input[i];
        input[i] = input[j];
        input[j] = temp;
    }
    private boolean smaller(String a, String b){
        int i = 0;
        while(i < a.length() && i < b.length()){
            if(a.charAt(i) < b.charAt(i)){
                return true;
            }
            if(a.charAt(i) > b.charAt(i)){
                return false;
            }
            i++;
        }
        if(a.length()>=i){
            return false;
        }
        return true;
    }
